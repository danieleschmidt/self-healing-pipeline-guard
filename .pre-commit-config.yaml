# Pre-commit configuration for Self-Healing Pipeline Guard
# See https://pre-commit.com for more information

repos:
  # Built-in pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--allow-multiple-documents]
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-symlinks
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: check-docstring-first
      - id: debug-statements
      - id: name-tests-test
        args: [--pytest-test-first]
      - id: requirements-txt-fixer
      - id: fix-byte-order-marker
      - id: mixed-line-ending
        args: [--fix=lf]

  # Python code formatting with Black
  - repo: https://github.com/psf/black
    rev: 23.11.0
    hooks:
      - id: black
        language_version: python3.11
        args: [--line-length=88]

  # Import sorting with isort
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]

  # Fast Python linter and formatter
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.7
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
      - id: ruff-format

  # Type checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.1
    hooks:
      - id: mypy
        additional_dependencies:
          - types-requests
          - types-PyYAML
          - types-redis
          - types-setuptools
        args: [--strict, --ignore-missing-imports]
        exclude: ^(tests/|migrations/|docs/)

  # Security checking with bandit
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, ., -f, json, -o, bandit-report.json]
        exclude: ^tests/

  # Dependency vulnerability checking
  - repo: https://github.com/gitguardian/ggshield
    rev: v1.25.0
    hooks:
      - id: ggshield
        language: python
        stages: [commit]

  # YAML formatting and linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.33.0
    hooks:
      - id: yamllint
        args: [-d, relaxed]

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        args: [-e, SC1091]

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        args: [--fix]

  # Commit message linting
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # Documentation building check
  - repo: local
    hooks:
      - id: docs-build
        name: Build documentation
        entry: poetry run mkdocs build --strict
        language: system
        files: ^(docs/|mkdocs\.yml)
        pass_filenames: false

  # Test execution
  - repo: local
    hooks:
      - id: pytest-check
        name: Run pytest
        entry: poetry run pytest tests/unit --maxfail=1 -q
        language: system
        pass_filenames: false
        stages: [push]

  # Configuration file validation
  - repo: local
    hooks:
      - id: validate-config
        name: Validate configuration files
        entry: python scripts/validate_config.py
        language: system
        files: ^(config/|\.env\.example|pyproject\.toml)$
        pass_filenames: false

  # Security policy check
  - repo: local
    hooks:
      - id: security-policy
        name: Check security policies
        entry: python scripts/check_security_policies.py
        language: system
        files: ^(healing_guard/|tests/).*\.py$
        pass_filenames: false

# Global configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false

# Default stages
default_stages: [commit, push]

# Exclude patterns
exclude: |
  (?x)^(
      \.git/|
      \.venv/|
      venv/|
      node_modules/|
      __pycache__/|
      \.pytest_cache/|
      \.mypy_cache/|
      \.ruff_cache/|
      build/|
      dist/|
      \.eggs/|
      .*\.egg-info/|
      logs/|
      tmp/|
      temp/
  )$