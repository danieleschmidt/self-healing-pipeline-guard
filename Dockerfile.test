# Multi-stage Dockerfile for testing environment
FROM python:3.11-slim as test-base

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    postgresql-client \
    redis-tools \
    && rm -rf /var/lib/apt/lists/*

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Create app user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set work directory
WORKDIR /app

# Install Poetry
RUN pip install poetry==1.7.1

# Configure Poetry
ENV POETRY_NO_INTERACTION=1 \
    POETRY_VENV_IN_PROJECT=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache

# Copy dependency files
COPY pyproject.toml poetry.lock ./

# Install dependencies
RUN poetry install --with dev,test && rm -rf $POETRY_CACHE_DIR

# Copy application code
COPY . .

# Change ownership to app user
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command
CMD ["poetry", "run", "pytest", "tests/", "-v", "--cov=healing_guard"]

# Testing stage with additional tools
FROM test-base as test-extended

USER root

# Install additional testing tools
RUN apt-get update && apt-get install -y \
    wget \
    unzip \
    chromium \
    chromium-driver \
    && rm -rf /var/lib/apt/lists/*

# Install Playwright browsers
RUN poetry run playwright install --with-deps chromium

# Install security testing tools
RUN pip install \
    bandit[toml] \
    safety \
    semgrep \
    mutmut

# Switch back to app user
USER appuser

# Performance testing stage
FROM test-base as performance-test

USER root

# Install performance testing tools
RUN apt-get update && apt-get install -y \
    apache2-utils \
    && rm -rf /var/lib/apt/lists/*

# Install Locust
RUN poetry add locust

USER appuser

CMD ["poetry", "run", "locust", "-f", "tests/performance/locustfile.py", "--headless"]

# Security testing stage
FROM test-base as security-test

USER root

# Install security scanning tools
RUN apt-get update && apt-get install -y \
    nmap \
    nikto \
    && rm -rf /var/lib/apt/lists/*

# Install additional security tools
RUN pip install \
    bandit[toml] \
    safety \
    semgrep \
    pip-audit

USER appuser

CMD ["bash", "scripts/security-scan.sh"]