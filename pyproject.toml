[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "self-healing-pipeline-guard"
version = "1.0.0"
description = "AI-powered CI/CD guardian that automatically detects, diagnoses, and fixes pipeline failures"
authors = ["Terragon Labs <devops-ai@terragon.ai>"]
license = "Apache-2.0"
readme = "README.md"
homepage = "https://github.com/terragon-labs/self-healing-pipeline-guard"
repository = "https://github.com/terragon-labs/self-healing-pipeline-guard"
documentation = "https://docs.terragon.ai/healing-guard"
keywords = ["ci-cd", "devops", "automation", "ai", "healing", "quantum-optimization"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: System :: Systems Administration",
    "Topic :: System :: Monitoring",
]
packages = [{include = "healing_guard"}]

[tool.poetry.dependencies]
python = "^3.11"
typer = {extras = ["all"], version = "^0.12.0"}
fastapi = "^0.104.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
pydantic = "^2.4.0"
sqlalchemy = "^2.0.0"
alembic = "^1.12.0"
redis = "^5.0.0"
psycopg2-binary = "^2.9.0"
httpx = "^0.25.0"
rich = "^13.6.0"
click = "^8.1.0"
pyyaml = "^6.0.0"
jinja2 = "^3.1.0"
numpy = "^1.25.0"
scipy = "^1.11.0"
scikit-learn = "^1.3.0"
pandas = "^2.1.0"
matplotlib = "^3.8.0"
seaborn = "^0.13.0"
plotly = "^5.17.0"
asyncio-mqtt = "^0.16.0"
structlog = "^23.2.0"
opentelemetry-api = "^1.20.0"
opentelemetry-sdk = "^1.20.0"
opentelemetry-exporter-jaeger = "^1.20.0"
prometheus-client = "^0.19.0"
cryptography = "^41.0.0"
bcrypt = "^4.1.0"
passlib = {extras = ["bcrypt"], version = "^1.7.0"}
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
python-multipart = "^0.0.20"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-benchmark = "^4.0.0"
black = "^23.9.0"
ruff = "^0.1.0"
mypy = "^1.6.0"
pre-commit = "^3.5.0"
bandit = "^1.7.0"
safety = "^2.3.0"
locust = "^2.17.0"
factory-boy = "^3.3.0"
freezegun = "^1.2.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.0"
mkdocs-material = "^9.4.0"
mkdocs-mermaid2-plugin = "^1.1.0"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}

[tool.poetry.scripts]
healing-guard = "healing_guard.cli:app"
healing-server = "healing_guard.server:main"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.black]
line-length = 100
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["F401", "F811"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "scipy.*",
    "sklearn.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "redis.*",
    "psycopg2.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

[tool.coverage.run]
source = ["healing_guard"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]