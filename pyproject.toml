[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "self-healing-pipeline-guard"
version = "1.0.0"
description = "AI-powered CI/CD guardian that automatically detects, diagnoses, and fixes pipeline failures"
authors = ["Terragon Labs <dev@terragonlabs.com>"]
license = "Apache-2.0"
readme = "README.md"
packages = [{include = "healing_guard"}]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
pydantic = "^2.5.0"
asyncio = "^3.4.3"
aiohttp = "^3.9.0"
prometheus-client = "^0.19.0"
redis = "^5.0.1"
psycopg2-binary = "^2.9.9"
sqlalchemy = "^2.0.23"
alembic = "^1.13.1"
tenacity = "^8.2.3"
structlog = "^23.2.0"
typer = "^0.9.0"
rich = "^13.7.0"
click = "^8.1.7"
python-multipart = "^0.0.6"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
scikit-learn = "^1.3.2"
numpy = "^1.26.2"
pandas = "^2.1.4"
matplotlib = "^3.8.2"
opentelemetry-api = "^1.21.0"
opentelemetry-sdk = "^1.21.0"
opentelemetry-instrumentation-fastapi = "^0.45b0"
opentelemetry-instrumentation-requests = "^0.45b0"
opentelemetry-instrumentation-logging = "^0.45b0"
opentelemetry-exporter-prometheus = "^1.15.0"
httpx = "^0.25.2"
kubernetes = "^28.1.0"
docker = "^6.1.3"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
black = "^23.11.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.7.1"
pre-commit = "^3.6.0"
bandit = "^1.7.5"
safety = "^2.3.5"
locust = "^2.17.0"
httpx = "^0.25.2"

[tool.poetry.group.test.dependencies]
pytest-benchmark = "^4.0.0"
pytest-xdist = "^3.5.0"
factory-boy = "^3.3.0"
freezegun = "^1.2.2"
responses = "^0.24.1"
docker = "^6.1.3"

[tool.poetry.scripts]
healing-guard = "healing_guard.cli:main"
server = "server:main"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["healing_guard"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
no_implicit_reexport = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "performance: Performance tests"
]

[tool.coverage.run]
source = ["healing_guard"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

[tool.bandit]
exclude_dirs = ["tests", "venv"]
skips = ["B101", "B601"]