[tool.poetry]
name = "self-healing-pipeline-guard"
version = "1.0.0"
description = "AI-powered CI/CD guardian that automatically detects, diagnoses, and fixes pipeline failures"
authors = ["Terragon Labs <info@terragonlabs.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/terragon-labs/self-healing-pipeline-guard"
repository = "https://github.com/terragon-labs/self-healing-pipeline-guard"
documentation = "https://docs.terragonlabs.com/healing-guard"
keywords = ["ci-cd", "devops", "automation", "ml", "pipeline", "healing"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Build Tools",
    "Topic :: System :: Systems Administration",
]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
sqlalchemy = "^2.0.23"
asyncpg = "^0.29.0"
alembic = "^1.13.0"
redis = {extras = ["hiredis"], version = "^5.0.1"}
httpx = "^0.25.2"
aiofiles = "^23.2.1"
python-multipart = "^0.0.6"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
celery = "^5.3.4"
prometheus-client = "^0.19.0"
opentelemetry-api = "^1.21.0"
opentelemetry-sdk = "^1.21.0"
opentelemetry-instrumentation-fastapi = "^0.42b0"
opentelemetry-instrumentation-sqlalchemy = "^0.42b0"
opentelemetry-instrumentation-redis = "^0.42b0"
structlog = "^23.2.0"
rich = "^13.7.0"
typer = "^0.9.0"
click = "^8.1.7"
jinja2 = "^3.1.2"

# ML/AI dependencies
scikit-learn = "^1.3.2"
pandas = "^2.1.4"
numpy = "^1.25.2"
matplotlib = "^3.8.2"
seaborn = "^0.13.0"
transformers = "^4.36.0"
torch = "^2.1.1"
tensorflow = "^2.15.0"
joblib = "^1.3.2"

# Cloud integrations
boto3 = "^1.34.0"
google-cloud-storage = "^2.10.0"
azure-storage-blob = "^12.19.0"

# CI/CD platform integrations
pygithub = "^2.1.1"
python-gitlab = "^4.2.0"
jenkinsapi = "^0.3.11"

# Communication integrations
slack-sdk = "^3.26.0"
discord-py = "^2.3.2"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
pytest-timeout = "^2.2.0"
black = "^23.11.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.7.1"
bandit = "^1.7.5"
safety = "^2.3.5"
pre-commit = "^3.6.0"
ruff = "^0.12.5"

[tool.poetry.group.test.dependencies]
factory-boy = "^3.3.0"
faker = "^37.4.2"
httpx = "^0.25.2"
respx = "^0.20.2"
pytest-benchmark = "^4.0.0"
locust = "^2.17.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.8"
mkdocs-mermaid2-plugin = "^1.1.1"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}
mike = "^2.0.0"

[tool.poetry.scripts]
healing-guard = "healing_guard.cli:app"
hg = "healing_guard.cli:app"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["healing_guard"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy"]

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "prometheus_client.*",
    "transformers.*",
    "torch.*",
    "tensorflow.*",
    "sklearn.*",
    "pandas.*",
    "matplotlib.*",
    "seaborn.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=healing_guard",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--timeout=30",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "ml: marks tests as machine learning tests",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["healing_guard"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstract",
]

# Ruff configuration
[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
line-length = 88
target-version = "py311"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

# Poetry plugin configuration
[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"