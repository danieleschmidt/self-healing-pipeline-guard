version: '3.8'

services:
  # Main Healing Guard API
  healing-guard-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: healing-guard-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://healing_user:${DB_PASSWORD}@postgres:5432/healing_guard
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    depends_on:
      - postgres
      - redis
      - otel-collector
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./security:/app/security
    networks:
      - healing-guard-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
      replicas: 2
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 3

  # Real-time Dashboard API
  healing-guard-dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: dashboard
    container_name: healing-guard-dashboard
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://healing_user:${DB_PASSWORD}@postgres:5432/healing_guard
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
      - healing-guard-api
    volumes:
      - ./logs:/app/logs
    networks:
      - healing-guard-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: healing-guard-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=healing_guard
      - POSTGRES_USER=healing_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-local=trust --auth-host=md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - healing-guard-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    command: >
      postgres
        -c max_connections=200
        -c shared_buffers=256MB
        -c effective_cache_size=1GB
        -c maintenance_work_mem=64MB
        -c checkpoint_completion_target=0.9
        -c wal_buffers=16MB
        -c default_statistics_target=100
        -c random_page_cost=1.1
        -c effective_io_concurrency=200

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: healing-guard-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server
        --appendonly yes
        --appendfsync everysec
        --maxmemory 512mb
        --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - healing-guard-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: healing-guard-otel
    restart: unless-stopped
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8889:8889"   # Prometheus metrics
    volumes:
      - ./config/otel-collector.yml:/etc/otel-collector-config.yml
    command: ["--config=/etc/otel-collector-config.yml"]
    networks:
      - healing-guard-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: healing-guard-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - healing-guard-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: healing-guard-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
      - GF_SMTP_FROM_ADDRESS=${SMTP_FROM}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - healing-guard-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # Alert Manager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: healing-guard-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./config/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - healing-guard-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Nginx Load Balancer & SSL Termination
  nginx:
    image: nginx:alpine
    container_name: healing-guard-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - healing-guard-api
      - healing-guard-dashboard
      - grafana
    networks:
      - healing-guard-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: healing-guard-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki.yml:/etc/loki/loki.yml
      - loki_data:/loki
    command: -config.file=/etc/loki/loki.yml
    networks:
      - healing-guard-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  promtail:
    image: grafana/promtail:latest
    container_name: healing-guard-promtail
    restart: unless-stopped
    volumes:
      - ./config/promtail.yml:/etc/promtail/promtail.yml
      - ./logs:/var/log/app
      - /var/log:/var/log/host:ro
    command: -config.file=/etc/promtail/promtail.yml
    depends_on:
      - loki
    networks:
      - healing-guard-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 512M

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: healing-guard-backup
    restart: unless-stopped
    environment:
      - PGHOST=postgres
      - PGPORT=5432
      - PGDATABASE=healing_guard
      - PGUSER=healing_user
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    command: >
      sh -c "
        apk add --no-cache dcron &&
        echo '0 2 * * * /backup.sh' > /tmp/crontab &&
        crontab /tmp/crontab &&
        crond -f
      "
    depends_on:
      - postgres
    networks:
      - healing-guard-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 512M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  loki_data:
    driver: local

networks:
  healing-guard-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16