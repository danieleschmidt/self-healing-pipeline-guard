name: Automated Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  check-changes:
    name: Check for Release Changes
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.semantic-check.outputs.new_release_published }}
      new_version: ${{ steps.semantic-check.outputs.new_release_version }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Node dependencies
        run: npm ci

      - name: Check for semantic release
        id: semantic-check
        run: |
          npx semantic-release --dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}

  test-release:
    name: Pre-Release Testing
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.should_release == 'true' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: healing_guard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest

      - name: Install dependencies
        run: poetry install --with dev,test

      - name: Run comprehensive test suite
        run: |
          poetry run pytest tests/ -v --cov=healing_guard --cov-report=xml
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/healing_guard_test
          REDIS_URL: redis://localhost:6379

      - name: Run performance benchmarks
        run: poetry run pytest tests/performance/ --benchmark-only

  build-release:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: [check-changes, test-release]
    if: needs.check-changes.outputs.should_release == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Node dependencies
        run: npm ci

      - name: Build Python package
        run: poetry build

      - name: Build documentation
        run: |
          poetry install --with docs
          poetry run mkdocs build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-assets
          path: |
            dist/
            site/

  docker-release:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [check-changes, test-release]
    if: needs.check-changes.outputs.should_release == 'true' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  semantic-release:
    name: Create Semantic Release
    runs-on: ubuntu-latest
    needs: [check-changes, test-release, build-release, docker-release]
    if: needs.check-changes.outputs.should_release == 'true' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write

    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest

      - name: Install dependencies
        run: |
          npm ci
          poetry install

      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-assets
          path: release-assets/

      - name: Create semantic release
        id: semantic
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

  pypi-publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: semantic-release
    if: needs.semantic-release.outputs.new_release_published == 'true'
    
    environment:
      name: pypi
      url: https://pypi.org/p/self-healing-pipeline-guard
    
    permissions:
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          ref: v${{ needs.semantic-release.outputs.new_release_version }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest

      - name: Update version in pyproject.toml
        run: poetry version ${{ needs.semantic-release.outputs.new_release_version }}

      - name: Build package
        run: poetry build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}

  github-marketplace:
    name: Update GitHub Marketplace
    runs-on: ubuntu-latest
    needs: [semantic-release]
    if: needs.semantic-release.outputs.new_release_published == 'true'
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: v${{ needs.semantic-release.outputs.new_release_version }}

      - name: Update action.yml version
        run: |
          sed -i "s/image: 'docker://ghcr.io\/${{ github.repository }}:.*/image: 'docker://ghcr.io\/${{ github.repository }}:v${{ needs.semantic-release.outputs.new_release_version }}'/" action.yml

      - name: Commit version updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add action.yml
          git commit -m "chore: update action version to v${{ needs.semantic-release.outputs.new_release_version }}" || exit 0
          git push

  docs-deploy:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: semantic-release
    if: needs.semantic-release.outputs.new_release_published == 'true'
    
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: v${{ needs.semantic-release.outputs.new_release_version }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest

      - name: Install dependencies
        run: poetry install --with docs

      - name: Deploy docs to GitHub Pages
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          poetry run mike deploy --push --update-aliases v${{ needs.semantic-release.outputs.new_release_version }} latest
          poetry run mike set-default --push latest

  notify-release:
    name: Release Notifications
    runs-on: ubuntu-latest
    needs: [semantic-release, pypi-publish, github-marketplace, docs-deploy]
    if: needs.semantic-release.outputs.new_release_published == 'true'
    
    steps:
      - name: Notify Teams
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🚀 New release published: v${{ needs.semantic-release.outputs.new_release_version }}
            
            📦 PyPI: https://pypi.org/project/self-healing-pipeline-guard/
            🐳 Docker: ghcr.io/${{ github.repository }}:v${{ needs.semantic-release.outputs.new_release_version }}
            📚 Docs: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/
            📋 Release Notes: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.semantic-release.outputs.new_release_version }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Update internal systems
        run: |
          curl -X POST "${{ secrets.INTERNAL_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "event": "release",
              "repository": "${{ github.repository }}",
              "version": "v${{ needs.semantic-release.outputs.new_release_version }}",
              "docker_image": "ghcr.io/${{ github.repository }}:v${{ needs.semantic-release.outputs.new_release_version }}"
            }'

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [semantic-release, pypi-publish, github-marketplace, docs-deploy]
    if: failure() && needs.semantic-release.outputs.new_release_published == 'true'
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}

      - name: Delete failed release
        run: |
          gh release delete v${{ needs.semantic-release.outputs.new_release_version }} --yes
          git push --delete origin v${{ needs.semantic-release.outputs.new_release_version }}
        env:
          GH_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ⚠️ Release v${{ needs.semantic-release.outputs.new_release_version }} failed and has been rolled back
            Please check the failed workflow for details.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}